version: '3.8'

services:
  surrealdb:
    image: surrealdb/surrealdb:v2.3.0
    container_name: embed_star_surrealdb
    restart: unless-stopped
    ports:
      - "8000:8000"
    command: start --log info --user root --pass ${SURREAL_PASS:-root} memory --auth --allow-all
    environment:
      - SURREAL_PATH=/data
    volumes:
      - surrealdb_data:/data
    networks:
      - embed_star_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  embed_star:
    build: .
    image: embed_star:latest
    container_name: embed_star_service
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      # Database configuration
      - DB_URL=ws://surrealdb:8000
      - DB_USER=root
      - DB_PASS=${SURREAL_PASS:-root}
      - DB_NAMESPACE=${DB_NAMESPACE:-gitstars}
      - DB_DATABASE=${DB_DATABASE:-stars}
      
      # Embedding provider configuration
      - EMBEDDING_PROVIDER=${EMBEDDING_PROVIDER:-ollama}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-nomic-embed-text}
      - OLLAMA_URL=${OLLAMA_URL:-http://ollama:11434}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TOGETHER_API_KEY=${TOGETHER_API_KEY}
      
      # Performance configuration
      - BATCH_SIZE=${BATCH_SIZE:-10}
      - PARALLEL_WORKERS=${PARALLEL_WORKERS:-3}
      - POOL_MAX_SIZE=${POOL_MAX_SIZE:-10}
      - TOKEN_LIMIT=${TOKEN_LIMIT:-8000}
      
      # Logging
      - RUST_LOG=${RUST_LOG:-info,embed_star=info}
    depends_on:
      surrealdb:
        condition: service_healthy
    networks:
      - embed_star_network
    volumes:
      - embed_star_logs:/data/logs

  # Optional: Ollama for local embeddings
  ollama:
    image: ollama/ollama:latest
    container_name: embed_star_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - embed_star_network
    profiles:
      - ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: embed_star_prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - embed_star_network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: embed_star_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - embed_star_network
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  surrealdb_data:
  embed_star_logs:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  embed_star_network:
    driver: bridge